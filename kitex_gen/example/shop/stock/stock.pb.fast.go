// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package stock

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "mykitex/kitex_gen/example/shop/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GetItemStockReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetItemStockReq[number], err)
}

func (x *GetItemStockReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetItemStockResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetItemStockResp[number], err)
}

func (x *GetItemStockResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetItemStockResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetItemStockReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetItemStockReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *GetItemStockResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetItemStockResp) fastWriteField1(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStock())
	return offset
}

func (x *GetItemStockResp) fastWriteField255(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetBaseResp())
	return offset
}

func (x *GetItemStockReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetItemStockReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *GetItemStockResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetItemStockResp) sizeField1() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStock())
	return n
}

func (x *GetItemStockResp) sizeField255() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetBaseResp())
	return n
}

var fieldIDToName_GetItemStockReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_GetItemStockResp = map[int32]string{
	1:   "Stock",
	255: "BaseResp",
}

var _ = base.File_idl_base_proto
